jobs:
- job: Provision
  displayName: 'Provision DICOM'
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: AzurePowerShell@5
    displayName: 'New Resource Group'
    inputs:
      azureSubscription: $(azureSubscriptionName)
      azurePowerShellVersion: latestVersion
      ScriptType: InlineScript
      Inline: |
        New-AzResourceGroup -Name "$(resourceGroupName)" -Location "$(resourceGroupRegion)" -Force

  - template: add-aad-test-environment.yml

  - task: AzurePowerShell@5
    name: deploy
    displayName: 'New Azure resource group deployment'
    inputs:
      azureSubscription: $(azureSubscriptionName)
      azurePowerShellVersion: latestVersion
      ScriptType: InlineScript
      Inline: |
        Add-Type -AssemblyName System.Web

        $deployPath = "$(System.DefaultWorkingDirectory)/samples/templates"

        $additionalProperties = @{
            "SqlServer__DeleteAllDataOnStartup" = "$(deleteDataOnStartup)"
            "DicomServer__Security__Authorization__Enabled" = "true"
            "DicomServer__Features__EnableUpsRs" = "true"
        }

        $sqlAdminPassword = "$(-join((((33,35,37,38,42,43,45,46,95) + (48..57) + (65..90) + (97..122) | Get-Random -Count 20) + ((33,35,37,38,42,43,45,46,95) | Get-Random -Count 1) + ((48..57) | Get-Random -Count 1) + ((65..90) | Get-Random -Count 1) + ((97..122) | Get-Random -Count 1) | Get-Random -Count 24) | % {[char]$_}))"
        Write-Host "##vso[task.setvariable variable=sqlAdminPassword;isSecret=true;isOutput=true]$sqlAdminPassword"

        $templateParameters = @{
            serviceName = "$(deploymentName)"
            functionAppName = "$(deploymentName)-functions"
            appServicePlanResourceGroup = "$(appServicePlanResourceGroup)"
            appServicePlanName = "$(appServicePlanName)"
            additionalDicomServerConfigProperties = $additionalProperties
            sqlAdminPassword = $sqlAdminPassword
            securityAuthenticationAuthority = "https://login.microsoftonline.com/$(tenant-id)"
            securityAuthenticationAudience = "$(testApplicationResource)"
            deployPackage = $false
        }

        $deployment = New-AzResourceGroupDeployment -Name "$(deploymentName)" -ResourceGroupName "$(resourceGroupName)" -TemplateFile $deployPath/default-azuredeploy.json -TemplateParameterObject $templateParameters -Verbose

        Set-AzKeyVaultAccessPolicy -VaultName "$(deploymentName)" -ObjectId $(azureServiceConnectionOid) -PermissionsToSecrets list,get

        $storageAccountName = $deployment.Outputs['storageAccountName'].Value
        Write-Host "##vso[task.setvariable variable=azureStorageAccountName;isOutput=true]$storageAccountName"

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Deployment Binaries'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      downloadPath: '$(System.ArtifactsDirectory)'
      artifactName: 'deploy'

  - task: AzureRMWebAppDeployment@4
    displayName: 'Deploy Dicom Web App'
    inputs:
      connectionType: 'AzureRM'
      azureSubscription: $(azureSubscriptionName)
      webAppKind: 'webApp'
      webAppName: '$(deploymentName)'
      package: '$(System.ArtifactsDirectory)/deploy/Microsoft.Health.Dicom.Web.zip'
      takeAppOfflineFlag: true

  - task: AzureRMWebAppDeployment@4
    displayName: 'Deploy Dicom Functions'
    inputs:
      connectionType: 'AzureRM'
      azureSubscription: $(azureSubscriptionName)
      webAppKind: 'functionApp'
      webAppName: '$(deploymentName)-functions'
      package: '$(System.ArtifactsDirectory)/deploy/Microsoft.Health.Dicom.Functions.App.zip'
      takeAppOfflineFlag: true
