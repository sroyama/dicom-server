# DESCRIPTION:
# Builds and pushes a docker image for dicom-server and dicom-cast

parameters:
  - name: tag
    type: string
  - name: push
    type: boolean
    default: true

steps:
  - ${{ if eq(parameters.push, true) }}:
    - task: Docker@2
      displayName: Login
      inputs:
        command: login
        containerRegistry: '$(azureContainerRegistry)'

  - task: Docker@2
    displayName: 'Build dicom-server'
    inputs:
      command: 'build'
      containerRegistry: '$(azureContainerRegistry)'
      Dockerfile: 'src/Microsoft.Health.Dicom.Web/Dockerfile'
      buildContext: '$(Build.Repository.LocalPath)'
      arguments: '--build-arg BUILD_CONFIGURATION=Release --build-arg CONTINUOUS_INTEGRATION_BUILD=true'
      repository: dicom-server
      tags: ${{ parameters.tag }}

  - task: Docker@2
    displayName: 'Build dicom-cast'
    inputs:
      command: 'build'
      containerRegistry: '$(azureContainerRegistry)'
      Dockerfile: 'converter/dicom-cast/src/Microsoft.Health.DicomCast.Hosting/Dockerfile'
      buildContext: '$(Build.Repository.LocalPath)'
      arguments: '--build-arg BUILD_CONFIGURATION=Release --build-arg CONTINUOUS_INTEGRATION_BUILD=true'
      repository: dicom-cast
      tags: ${{ parameters.tag }}

  - task: Docker@2
    displayName: 'Build dicom-functions'
    inputs:
      command: 'build'
      containerRegistry: '$(azureContainerRegistry)'
      Dockerfile: 'src/Microsoft.Health.Dicom.Functions.App/Docker/Dockerfile'
      buildContext: '$(Build.Repository.LocalPath)'
      arguments: '--build-arg BUILD_CONFIGURATION=Release --build-arg CONTINUOUS_INTEGRATION_BUILD=true'
      repository: dicom-functions
      tags: ${{ parameters.tag }}

  - task: Docker@2
    displayName: 'Build dicom-uploader'
    inputs:
      command: 'build'
      containerRegistry: '$(azureContainerRegistry)'
      Dockerfile: 'tools/uploader-function/src/DicomUploaderFunction/Dockerfile'
      buildContext: '$(Build.Repository.LocalPath)'
      arguments: '--build-arg BUILD_CONFIGURATION=Release --build-arg CONTINUOUS_INTEGRATION_BUILD=true'
      repository: dicom-uploader
      tags: |
        ${{ parameters.tag }}
        latest

  # Build SQL for the sake of component governance
  - task: Docker@2
    displayName: 'Build SQL Server Image'
    inputs:
      command: 'build'
      containerRegistry: '$(azureContainerRegistry)'
      Dockerfile: 'docker/sql/Dockerfile'
      buildContext: '$(Build.Repository.LocalPath)'
      repository: mssql-server-focal
      tags: ${{ parameters.tag }}

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
      failOnAlert: true

  - ${{ if eq(parameters.push, true) }}:
    - task: Docker@2
      displayName: 'Push dicom-server'
      inputs:
        command: 'push'
        containerRegistry: '$(azureContainerRegistry)'
        repository: dicom-server
        tags: ${{ parameters.tag }}

  - ${{ if eq(parameters.push, true) }}:
    - task: Docker@2
      displayName: 'Push dicom-cast'
      inputs:
        command: 'push'
        containerRegistry: '$(azureContainerRegistry)'
        repository: dicom-cast
        tags: ${{ parameters.tag }}

  - ${{ if eq(parameters.push, true) }}:
    - task: Docker@2
      displayName: 'Push dicom-functions'
      inputs:
        command: 'push'
        containerRegistry: '$(azureContainerRegistry)'
        repository: dicom-functions
        tags: ${{ parameters.tag }}

  - ${{ if eq(parameters.push, true) }}:
    - task: Docker@2
      displayName: 'Push dicom-uploader'
      inputs:
        command: 'push'
        containerRegistry: '$(azureContainerRegistry)'
        repository: dicom-uploader
        tags: |
          ${{ parameters.tag }}
          latest

  - ${{ if eq(parameters.push, true) }}:
    - task: Docker@2
      displayName: Logout
      inputs:
        command: logout
        containerRegistry: '$(azureContainerRegistry)'
      condition: always()
